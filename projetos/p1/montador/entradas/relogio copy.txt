#-----------------------------------------------------------------
#CODIGO ASSEMBLY RELOGIO
#-----------------------------------------------------------------

# SETUP()

# Inicializa constantes na memória - usando registrador 0
LDI %r0, $0
STA @0, %r0      #Armazena o valor de r0 em MEM[0] (constante 0)
LDI %r0, $1      
STA @1, %r0      #Armazena o valor de r0 em MEM[1] (constante 1)
LDI %r0, $10
STA @2, %r0      #Armazena o valor de r0 em MEM[2] (constante 10)
LDI %r0, $6
STA @3, %r0      #Armazena o valor de r0 em MEM[3] (constante 6)
LDI %r0, $4
STA @4, %r0      #Armazena o valor de r0 em MEM[4] (constante 4)
LDI %r0, $2
STA @5, %r0      #Armazena o valor de r0 em MEM[5] (constante 2)
LDI %r0, $3
STA @6, %r0      #Armazena o valor de r0 em MEM[5] (constante 3)
LDI %r0, $0
STA @7, %r0       #Armazena o valor de r0 em MEM[7] (flag ta_tarde)
STA @8, %r0       #Armazena o valor de r0 em MEM[8] (flag meia_noite)
LDI %r0, $9
STA @9, %r0       #Armazena o valor de r0 em MEM[9] (constante 9)
LDI %r0, $4
STA @16, %r0      #Armazena o valor de r0 em MEM[16] (constante 4)
LDI %r0, $2
STA @17, %r0      #Armazena o valor de r0 em MEM[17] (constante 2)
LDI %r0, $0
STA @18, %r0      #Armazena o valor de r0 em MEM[18] (variavel campo) 0-seg 1-min 2-hr
STA @19, %r0      #Armazena o valor de r0 em MEM[19] (variavel deu0)
LDI %r0, $15      
STA @20, %r0      #Armazena o valor de r0 em MEM[20] (constante 15 - F)
LDI %r7, $0       # Inicializa o r7 com 0 para zerar leituras de botoes futuras

# Inicializa os LEDs
LDI %r0, $0			    #Carrega o acumulador com o valor 0
STA @257, %r0			#Armazena o valor do bit0 do acumulador no LDR8
STA @258, %r0			#Armazena o valor do bit0 do acumulador no LDR9
LDI %r0, $1			    #Carrega o acumulador com o valor 0
STA @256, %r0			#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7

INICIO:
# Inicializa variáveis de tempo (segundos,minutos,horas)
LDA %r0, @0      # apago o led da flag
STA @259, %r0  
LDI %r0, $0 
STA @7, %r0      #Zero a flag ta_tarde
LDI %r0, $0 
STA @8, %r0      #Zero a flag meia_noite
STA @10, %r0     #Armazena o valor de r0 em MEM[10] (unidades segundo)
STA @11, %r0     #Armazena o valor de r1 em MEM[11] (dezenas segundo)
STA @12, %r0     #Armazena o valor de r2 em MEM[12] (unidades minuto)
STA @13, %r0     #Armazena o valor de r3 em MEM[13] (dezenas minuto)
STA @14, %r0     #Armazena o valor de r4 em MEM[14] (unidades hora)
STA @15, %r0     #Armazena o valor de r5 em MEM[15] (dezenas hora)

# Inicializa os displays
LDI %r0, $0 
STA @288, %r0    #Inicializa display HEX0 com valor 0
STA @289, %r0    #Inicializa display HEX1 com valor 0
STA @290, %r0    #Inicializa display HEX2 com valor 0
STA @291, %r0    #Inicializa display HEX3 com valor 0
STA @292, %r0    #Inicializa display HEX4 com valor 0
STA @293, %r0    #Inicializa display HEX5 com valor 0

# Inicializa os LEDs

LOOP_PRINCIPAL:
# Verifica se deu meia-noite
LDA %r0, @8      #Carrega flag meia-noite
CEQ %r0, @1      #Compara flag com MEM[1] (constante 1)
JEQ $INICIO      # Se for meia-noite, zero tudo

# Verifica se SW[7~0] == 1
VERIFICA_SW0:
LDA %r1, @320                   # Carrega valor SW0~SW7
CEQ %r1, @1                     # Compara com 1
JEQ $CONFIGURACAO_ATIVADA       # Se for 1, verifico a leitura de segundo a partir do a partir do botao
CEQ %r1, @5                     # 
JEQ $VERIFICA_KEY1              # Se for 2, pulo para verificar key1
CEQ %r1, @6                     # 
JEQ $CONFIGURACAO_ATIVADA       # Se for 3, pulo para CONFIGURACAO_ATIVADA 
LDA %r0, @0                     # DEBUG Se chave SW0 NAO estiver ativa, apago o led
STA @257, %r0                   # DEBUG
JMP $CONFIGURACAO_DESATIVADA    # Se for qualquer outra coisa, verifico a leitura de segundo a partir do a partir do clk

CONFIGURACAO_ATIVADA:
LDA %r0, @1                     # DEBUG Se chave SW0 estiver ativa, ligo o led
STA @257, %r0                   # DEBUG
JMP $VERIFICA_KEY2              #Pulo para a verificacao do KEY0 (nao pode passar pelo verifica_segundo)  


VERIFICA_KEY2:
LDA %r1, @354                   # Carrega valor KEY2
CEQ %r1, @0                     # Compara com 0
JEQ $VERIFICA_KEY3              # Desvia para verificar KEY0 se KEY2 nao foi pressionado
JSR $INCREMENTO_KEY2            # Desvia para o incremento
NOP			                    # NOP
JMP $VERIFICA_KEY3              # Pulo para a verificacao do KEY0 

VERIFICA_KEY3:
LDA %r1, @355                   # Carrega valor KEY3
CEQ %r1, @0                     # Compara com 0
JEQ $VERIFICA_KEY0              # Desvia para verificar KEY0 se KEY3 nao foi pressionado
JSR $SELECIONA_CAMPO            # Desvia para a mudanca de campo 
NOP			                    # NOP
JMP $VERIFICA_KEY0              # Pulo para a verificacao do KEY0 

CONFIGURACAO_DESATIVADA:
# Verifica se deu um segundo
VERIFICA_SEGUNDO:
LDA %r1, @323	                #Carrega o r1 com a base de tempo
CEQ %r1, @0		                #Compara com o valor de MEM[0] (constante 0)
JEQ $VERIFICA_KEY0		        #Desvia para verificar key0 se igual a 0 (ainda nao deu um segundo) 
JSR $INCREMENTO_CLK             #Passou um segundo, chama a sub-rotina de incremento 
NOP			                    #  NOP
JMP $VERIFICA_KEY0              #Pulo para a verificacao do KEY0  



# Verifica se key0 foi pressionado
VERIFICA_KEY0:
LDA %r1, @352	        #Carrega o r1 com o valor de KEY0
CEQ %r1, @0		        #Compara com o valor de MEM[0] (constante 0)
JEQ $LOOP_PRINCIPAL		#Desvia para o inicio do loop se igual a 0 (botão não foi pressionado)
JSR $MUDANCA_BASE       #Passou um segundo, chama a sub-rotina de mudanca de base de tempo
NOP			            #  NOP
JMP $LOOP_PRINCIPAL     # Desvia para o inicio do loop depois da mudanca de

# Verifica se key1 foi pressionado - inicia o timer 
VERIFICA_KEY1:
LDA %r1, @353                   # Carrega valor KEY1
CEQ %r1, @0                     # Compara com 0
JEQ $LOOP_PRINCIPAL             # Desvia para verificar KEY0 se KEY2 nao foi pressionado
JSR $DECREMENTO                 # Desvia para o incremento
NOP			                    # NOP
JMP $LOOP_PRINCIPAL             # Pulo para a verificacao do KEY0 

# Sub-rotina de incremento ----------------------------------------------
INCREMENTO_KEY2:
STA @509, %r7	 #Limpa a leitura do da base de tempo
LDA %r0, @18
CEQ %r0, @0      # Compara com zero - se for zero pula pra segundo
JEQ $SEGUNDO_UNIDADE
CEQ %r0, @1      # Compara com UM - se for zero pula pra minuto
JEQ $MINUTO_UNIDADE
CEQ %r0, @5      # Compara com DOIS - se for zero pula pra hora
JEQ $HORA_UNIDADE
JMP $SEGUNDO_UNIDADE

INCREMENTO_CLK:
STA @507, %r7	 #Limpa a leitura do da base de tempo
JMP $SEGUNDO_UNIDADE



SEGUNDO_UNIDADE:
LDA %r0, @10     #Carrega o valor de MEM[10] (unidades segundo) no r0
SOMA %r0, @1     #Soma o r0 com o valor de MEM[1] (constante 1)
STA @10, %r0     #Salva o incremento em MEM[10] (unidades segundo)
CEQ %r0, @2      #Compara as unidades de segundo com MEM[2] (constante 10)
JEQ $SEGUNDO_DEZENA #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
JMP $ESCREVE_DISPLAY
FIM_INCREMENTO:
RET


SEGUNDO_DEZENA:
LDA %r0, @0      #Carrega o valor de MEM[0] (constante zero) no r0
STA @10, %r0     # Zero as unidades dos segundos
LDA %r1, @11     #Carrega o valor de MEM[11] (dezenas segundo) no r1
SOMA %r1, @1     #Soma o r0 com o valor de MEM[1] (constante 1)
STA @11, %r1     #Salva o incremento em MEM[11] (dezenas segundo)
CEQ %r1, @3      #Compara as unidades de segundo com MEM[3] (constante 6)
JEQ $MINUTO_UNIDADE
JMP $ESCREVE_DISPLAY

MINUTO_UNIDADE:
LDA %r1, @320                   # Carrega valor SW0~SW7
CEQ %r1, @1                     # Compara com 1
JEQ $PULA_ZERO0       # Se for 1, verifico a leitura de segundo a partir do a partir do botao
LDA %r1, @0      #Carrega o valor de MEM[0] (constante zero) no r0
STA @11, %r1     # Zero as unidades dos segundos
PULA_ZERO0:
LDA %r2, @12     #Carrega o valor de MEM[12] (unidades minuto) no r2
SOMA %r2, @1     #Soma o r2 com o valor de MEM[1] (constante 1)
STA @12, %r2     #Salva o incremento em MEM[12] (unidades minuto)
CEQ %r2, @2      #Compara as unidades de minuto com MEM[2] (constante 10)
JEQ $MINUTO_DEZENA #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
JMP $ESCREVE_DISPLAY

MINUTO_DEZENA:
LDA %r2, @0      #Carrega o valor de MEM[0] (constante zero) no r0
STA @12, %r2     # Zero as unidades dos segundos
LDA %r3, @13     #Carrega o valor de MEM[13] (dezenas minuto) no r3
SOMA %r3, @1     #Soma o r0 com o valor de MEM[1] (constante 1)
STA @13, %r3     #Salva o incremento em MEM[13] (dezenas minuto)
CEQ %r3, @3      #Compara as unidades de minuto com MEM[3] (constante 6)
JEQ $HORA_UNIDADE
JMP $ESCREVE_DISPLAY

HORA_UNIDADE:
LDA %r1, @320                   # Carrega valor SW0~SW7
CEQ %r1, @1                     # Compara com 1
JEQ $PULA_ZERO1       # Se for 1, verifico a leitura de segundo a partir do a partir do botao
LDA %r3, @0      #Carrega o valor de MEM[0] (constante zero) no r3
STA @13, %r3     # Zero as unidades dos segundos
PULA_ZERO1:
LDA %r4, @14     #Carrega o valor de MEM[14] (unidades hora) no r4
SOMA %r4, @1     #Soma o r4 com o valor de MEM[1] (constante 1)
STA @14, %r4     #Salva o incremento em MEM[14] (unidades hora)
CEQ %r4, @2      #Compara as unidades de hora com MEM[2] (constante 10)
JEQ $HORA_DEZENA #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
LDA %r6, @7      #Carrega o valor de MEM[7] (flag ta_tarde) no r6
CEQ %r6, @1      # Verifica se flag ta_tarde é um
JEQ $TA_TARDE    # pula para verificacao do valor de unidade de hora max (2 ou 4)
JMP $ESCREVE_DISPLAY

HORA_DEZENA:
LDA %r4, @0      #Carrega o valor de MEM[0] (constante zero) no r0
STA @14, %r4     # Zero as unidades dos segundos
LDA %r5, @15     #Carrega o valor de MEM[15] (dezenas minuto) no r5
SOMA %r5, @1     #Soma o r0 com o valor de MEM[1] (constante 1)
STA @15, %r5     #Salva o incremento em MEM[15] (dezenas minuto)
CEQ %r5, @17      #Compara as dezenas da hora com MEM[17] (2 ou 1)
JEQ $SETA_FLAG
JMP $ESCREVE_DISPLAY

ESCREVE_DISPLAY:
LDA %r0, @10     #Carrega o valor dos segundos em r0
STA @288, %r0    #Inicializa display HEX0 com valor 0
LDA %r0, @11
STA @289, %r0    #Inicializa display HEX1 com valor 0
LDA %r0, @12     #Carrega o valor dos segundos em r0
STA @290, %r2    #Inicializa display HEX2 com valor 0
LDA %r0, @13     #Carrega o valor dos segundos em r0
STA @291, %r0    #Inicializa display HEX3 com valor 0
LDA %r0, @14     #Carrega o valor dos segundos em r0
STA @292, %r0    #Inicializa display HEX4 com valor 0
LDA %r0, @15     #Carrega o valor dos segundos em r0
STA @293, %r0    #Inicializa display HEX5 com valor 0
JMP $FIM_INCREMENTO

# Aciona a flag, indicando max dezena hora
SETA_FLAG:
#LDA %r0, @1     # acendo led da flag
#STA @258, %r0
LDI %r6, $1
STA @7, %r6     # Guarda 1 na flag ta_tarde
JMP $ESCREVE_DISPLAY

# Verifica se deu meia-noite
TA_TARDE:
#LDA %r0, @0      # apago o led da flag
#STA @258, %r0  
LDA %r4, @14     #Carrega o valor de MEM[14] (unidades hora) no r4
CEQ %r4, @16      #Compara as unidades de hora com MEM[4] (constante 4)
JEQ $MEIA_NOITE
JMP $ESCREVE_DISPLAY

MEIA_NOITE:
LDA %r0, @1      # acendo o led da flag
STA @259, %r0  
LDI %r6, $1
STA @8, %r6     # Guarda 1 na flag meia_noite
JMP $FIM_INCREMENTO
# ------------------------------------------------------------------------

# Sub-rotina de mudanca de base (12-24) ----------------------------------
MUDANCA_BASE:
STA @511, %r7   # Limpa leitura botao
LDA %r0, @0     # Carrega constante 0
STA @256, %r0   # Apaga led
LDA %r0, @17    # Carrega a variavel de dezena de hora max no r0
CEQ %r0, @5     # Compara valor da variavel com dois
JEQ $TO_12      # Se for igual a dois, muda de 24 para 12
JMP $TO_24      # Se nao, muda de 12 para 24
FIM_MUDANCA_BASE:
RET

TO_12:
LDA %r0, @5             # carrega constante 2
STA @256, %r0
LDA %r1, @1             # Carrega um no registrador
STA @17, %r1            # Muda a variavel de dezena de hora para um
LDA %r1, @5             # Carrega dois no registrador
STA @16, %r1            # Muda a variavel de unidade de hora para dois
JMP $FIM_MUDANCA_BASE   # Volta para o fim da mudanca de base, para retornar da sub-rotina

TO_24:
LDA %r0, @1             # Carrega constante 1
STA @256, %r0
LDA %r1, @5             # Carrega dois no registrador
STA @17, %r1            # Muda a variavel de dezena de hora para um
LDA %r1, @4             # Carrega quatro no registrador
STA @16, %r1            # Muda a variavel de unidade de hora para quatro
JMP $FIM_MUDANCA_BASE   # Volta para o fim da mudanca de base, para retornar da sub-rotina
# ------------------------------------------------------------------------

# Sub-rotina de Selecao de Campo -----------------------------------------
SELECIONA_CAMPO:
STA @508, %r7
LDA %r0, @18     # Carrega variavel campo
SOMA %r0, @1
STA @18, %r0
CEQ %r0, @6      # Compara r0 com tres
JEQ $RESETA_CAMPO
RET

RESETA_CAMPO:
LDA %r0, @0        # Carrega zero no registrador
STA @18, %r0       # Carrega zero na MEM[18]
RET
# ------------------------------------------------------------------------

# Sub-rotina de Decremento------------------------------------------------
DECREMENTO:
SEGUNDO_UNIDADE_DEC:
STA @507, %r7	 #Limpa a leitura do da base de tempo
LDA %r0, @10     #Carrega o valor de MEM[10] (unidades segundo) no r0
SUB %r0, @1     #SUB o r0 com o valor de MEM[1] (constante 1)
STA @10, %r0     #Salva o incremento em MEM[10] (unidades segundo)
CEQ %r0, @20      #Compara as unidades de segundo com MEM[2] (constante 10)
JEQ $SEGUNDO_DEZENA_DEC #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
JMP $ESCREVE_DISPLAY
FIM_INCREMENTO:
RET


SEGUNDO_DEZENA_DEC:
LDA %r0, @9      #Carrega o valor de MEM[0] (constante zero) no r0
STA @10, %r0     # Maximiza as unidades dos segundos
LDA %r1, @11     #Carrega o valor de MEM[11] (dezenas segundo) no r1
SUB %r1, @1     #SUB o r0 com o valor de MEM[1] (constante 1)
STA @11, %r1     #Salva o incremento em MEM[11] (dezenas segundo)
CEQ %r1, @20      #Compara as unidades de segundo com MEM[3] (constante 6)
JEQ $MINUTO_UNIDADE_DEC
JMP $ESCREVE_DISPLAY

MINUTO_UNIDADE_DEC:
LDA %r1, @9      #Carrega o valor de MEM[0] (constante zero) no r0
STA @11, %r1     # Maximiza as unidades dos segundos
LDA %r2, @12     #Carrega o valor de MEM[12] (unidades minuto) no r2
SUB %r2, @1     #SUB o r2 com o valor de MEM[1] (constante 1)
STA @12, %r2     #Salva o incremento em MEM[12] (unidades minuto)
CEQ %r2, @20      #Compara as unidades de minuto com MEM[2] (constante 10)
JEQ $MINUTO_DEZENA_DEC #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
JMP $ESCREVE_DISPLAY

MINUTO_DEZENA_DEC:
LDA %r2, @9      #Carrega o valor de MEM[0] (constante zero) no r0
STA @12, %r2     # Maximiza as unidades dos segundos
LDA %r3, @13     #Carrega o valor de MEM[13] (dezenas minuto) no r3
SUB %r3, @1     #SUB o r0 com o valor de MEM[1] (constante 1)
STA @13, %r3     #Salva o incremento em MEM[13] (dezenas minuto)
CEQ %r3, @20      #Compara as unidades de minuto com MEM[3] (constante 6)
JEQ $HORA_UNIDADE_DEC
JMP $ESCREVE_DISPLAY

HORA_UNIDADE_DEC:
LDA %r3, @9      #Carrega o valor de MEM[0] (constante zero) no r3
STA @13, %r3     # Maximiza as unidades dos segundos
LDA %r4, @14     #Carrega o valor de MEM[14] (unidades hora) no r4
SUB %r4, @1     #SUB o r4 com o valor de MEM[1] (constante 1)
STA @14, %r4     #Salva o incremento em MEM[14] (unidades hora)
CEQ %r4, @20      #Compara as unidades de hora com MEM[2] (constante 10)
JEQ $HORA_DEZENA_DEC #Caso o valor das unidades venha a ser igual a 10, pula para dezenas
JMP $ESCREVE_DISPLAY

HORA_DEZENA_DEC:
LDA %r4, @9      #Carrega o valor de MEM[0] (constante zero) no r0
STA @14, %r4     # Zero as unidades dos segundos
LDA %r5, @15     #Carrega o valor de MEM[15] (dezenas minuto) no r5
SUB %r5, @1     #SUB o r0 com o valor de MEM[1] (constante 1)
STA @15, %r5     #Salva o incremento em MEM[15] (dezenas minuto)
CEQ %r5, @20      #Compara as dezenas da hora com MEM[17] (2 ou 1)
JEQ $SETA_FLAG
JMP $ESCREVE_DISPLAY
# ------------------------------------------------------------------------